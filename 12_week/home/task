1.
Тьюринг-полным в теории вычислимости называется исполнитель, на котором можно реализовать любую вычислимую функцию(можно реализовать на машине Тьюринга).

2.
Вычисления на этапе компиляции можно использовать, например, в сложных функциях, где необходимо приближенное вычисление максимально "дешево" по ресурсам, например, в играх.
Можно создать таблицу, значения которой будут считаться на этапе компиляции.
Так как рекурсивные вызовы функции являются дорогими, мы можем производить вычисления во время компиляции, тогда  factorial<4>::val сведется к числу 24,
а на стадии выполнения в исполняемом файле вычислений не будет. Вместо этого будет просто константное значение 24.
Можно обеспечить корректность единиц измерения, в независимо от сложности вычислений.

3.
Компилятор может проводить сложные вычиления (при условии, что входные данные известны)
Частичная специализация, рекурсивное инстанцирование, SFINAE + time trains, constexpr compline time if

4.
Некоторые функции нельзя вычислять на этапе компиляции, например, квадратный корень. На этапе компиляции не может быть создан динамический массив(вектор).  
Максимальная глубина рекурсии по умолчанию ограничена реализацией Например, для нового gcc это 900, для старых версий он меньше
Объем кода - если существует ограничение на количество кода.

5.
во время компиляции можно программно собрать фрагменты кода с результатом, получаемым во время выполнения.
Эта деятельность и называется гибридным метапрограммированием
он смешивает вычисления времени компиляции (достигнутые здесь с помощью рекурсивного инстанцирования шаблона),
определяющие общую структуру кода, с вычислениями времени выполнения (вызов result()),которые и определяют конкретный результат вычислений времени выполнения
