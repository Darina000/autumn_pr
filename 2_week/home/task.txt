1. Пространство памяти процесса:
- пространство ядра 
- стек
- свободное пространство
- куча
- сегмент данных (.data)
- сегмент кода (.text)

2. Связь встроенноего указателя и массива:
По сути, имя массива является адресом его первого элемента. Через операцию разыменования можно получить значение по этому адресу:
int a[] = {4, 2, 1};
std::cout << "a[0] = " << *a << std::endl; 
//вывод: a[0] = 4
Прибавляя к адресу первого элемента некоторое число, мы можем получить определенный элемент массива.

3. Небезопасноть низкоуровневой работы с памятью:
При использовании низкоуровневых средств возникает ряд "моментов", которые могут вывести из строя программу
-забыть delete;
-написать не тот delete;
-написать лишний delete
-арифметика указателей 
-разменоваие nullptr

4.
Указатель - переменная, значением которой является адрес. Чтобы получить указатель на переменную, нужно явно взять её адрес с помощьюа &. Чтобы обратиться к переменной, на которую указывает указатель, требуется явно разыменовать его с помощью *.

Ссылка - автоматически разыменованный при использовании //не нужно писать *, работает напрямую с данными без взятия по адресу// const указатель//не можем поменять указатель//,  без поддержки nullptr режима // должны обязательно инициализировать, обязана на что-то ссылаться. Ссылка позволяет дать дополнительное имя для переменной.

5. Передача данных в функцию.
void f(int x){x++} по значению, происходит копирование 
void f(int *x){*x++} по указателю, нет копирования, тут можно добавлять const для избежания изменения, вызов через &
void f(int &x){x++} по ссылке, нет копирования, вызов обычный, но при f(x), ч меняется 


