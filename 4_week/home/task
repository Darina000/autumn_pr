1.
Способы задать значение для данных-членов структуры:
1) обычное присваивания значений каждому члену структуры: Masha.age = 27; (Masha -> age = 27)
2) агрегатная инициализации Person Masha = {1, 27, 10000.0};
3) по умолчанию: 
struct Person
{
    int num = 1;
    int age = 27;
    double stat = 10000.0;
};
4) конструктором

2. Списки инициализации применяются в конструкторах на первом этапе - происходит создание (выделяется память) 
и инициализация данных-членов(как раз это делается через списки инициализации)

3.  В идиоме RAII (получение ресурсов есть инициализация), ресурс (например, память) обычно приобретается в конструкторе объекта. Потом этот ресурс можно использовать(пока жив). 
Ресурс освобождается в деструкторе при уничтожении объекта. То есть ресурсы не должны быть динамически выделенными, тк деструкторы вызываются только при уничтожении объектов.
Примеры: трассировка выполнения функции, открытие/закрытие файла, new/delete

4. Объединение и побитовое выделение хорошо использоваь для экономии памяти, когда нужно выделить какое-то ограниченое место для хранения,
это низкоуровневые средства, но часто используются для прикладных задачь с недостатком памяти. 

5. 
