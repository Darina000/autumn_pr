1.
Объективно-ориентированное проограмироваине основано на конципциях:
  инкапсуляция -  объединение данных и ф-членов в рамках одного класса, публичный интерфейс(ф-члены), приватные данные(они доступны только ф-членам)
  полиморфизм - одинаковый интерфейс, разные реализации (вычисление площади для разных  фигур)
  наследование  - передача от родителя потомкам 
  *абстракция - размещение одного объекта или класса внутри другого для разграничения доступа к ним.

2.
Маленькие функции внутри, большие стоит разделять/выносить. Принцип "разделяй и властвуй". Следует избегать сильных связей между классами(лучше реализовывать наследование).
Данные-члены лучше делать закрытыми (для сохранения инварианта класса).

3.
При изменении определения в cpp файле, не будет перекомпилироваться весь проект (только эта часть/ ю.т.). При изминении hpp - всё указанные. 
Также разделение на интерфейс и реализвцию удобно, если нужно скрыть способ внутренность класса(его реализацию), для разделения больших файлов и удобства.

4.
Внешнее связывание -несколько единиц трансляции могут обращаються к одному и тому же объекту в памяти.
Внутреннее связывание  - к нему нельзя обратиться из единицы трансляции, отличной от той, где она определена. 

5.
Ключевое слово namespace объявляет собственное пространство имён. Всё, что объявлено внутри пользовательского пространства имен,
— принадлежит только этому пространству имен (а не глобальному).
Имеет свойство аддитивности - всё, что находится внутри одного блока имен, считается частью только этого блока(код объединяется);
Одни пространства имен могут быть вложены в другие пространства имен.

