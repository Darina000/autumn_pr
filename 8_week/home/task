1.

Обработка ошибок 
Ошибки программиста(assert(работает в дебаг режиме),+ некоторые средства отладки,  ) 
runtime ошибки (деление на 0)(исключительные ситуации) - 
abort/terminate/exit 
if + while (просим сделать ещё раз)
код возврата (от С)
механизм исключений

2.

Неудобство кодов возврата
плохая читабельность 
- перечисление
Неудобство расширять/поддерживать 
Проблема с Z(непонятно, где код, агде знак того, что она упала)
-глобальная переменная(errno)
-аргумент по ссылке(boost)
Конструктор, деструктор, операторы(они не возвращают)

3.

Особенности механизма исключений:
Эффективность 
Многоуровневость f->g-> h_>ошибка, нужно сказать и вернуться в f
Преобразования
try - throw - catch

try
catch (все типы) 
вокруг границ модуля
- main
- сторонний код
- библиотеки
RAII + исключения


4. 



noexcept - спецификатор генерирует более от код // говорит что тут исключени не нужны и тут не нужно оптимизировать (геттеры можно помечать, swap(move версия) )
механизм искл медленнее if 


5.


Гарантии безопасности исключений:
базовая - если фу-я возникает искл, то нет утечек памяти
строгая гарантия - фу-я обеспечивает транз поведение - полный откат всех изменений (после исключения должна )
гарантия отсутствия исключений 

