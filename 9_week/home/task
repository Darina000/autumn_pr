1. 
  Шаблоны функций — это функции, которые служат образцом для создания других подобных функций. 
  Существуют шаблоны классов, функций, переменных, псевдонимов.
2.
  Двухэтапные трансляции шаблона:
  Когда работаем с шаблоном функции нельзя разбивать объявление и определение на несколько файлов, так проверки делаются компилятором
  1) Проверка без подстановки(приходят ошибки, не зависящие от типа) например, отсутствие “;”
  2) Проверка с подстановкой типа (нет оператора для какого-то определённого типа)
3. 
  Предпочтение отдаётся нешаблонной версии
4.
  Инстанцирование выполняется только для тех функций-членов, которые используются 
5.
  Специализация нужна для оптимизации реализации, в случае, если для какого-то конкретного типа требуется отдельная реализация 
  (например, сравнение double с погрешностью) частичная специализация позволяет частично настроить код шаблона для определенных типов
  


6* Для какого типа специализация стандартного шаблона класса std::vector имеет смысл с точки зрения оптимизации потребления памяти и почему? 

Стандартная библиотека C++ определяет специализацию шаблона вектора для типа bool. 
Согласно специализации, вектор должен упаковать элементы так, чтобы каждый элемент типа bооl использовал только один бит памяти. 
Проблемы возникают из-за того, что vector при индексации не может вернуть ссылку на bool. 
По сути ему нужно каким-то образом вернуть ссылку на один бит. 
Приходится использовать vector<bool>::reference — тип, который пытается имитировать своим поведением ссылку на bool, а совсем не bool&.
